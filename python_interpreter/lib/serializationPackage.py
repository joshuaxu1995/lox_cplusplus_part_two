# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: vmdata.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto


class ContextOpcode(betterproto.Enum):
    OP_CONSTANT = 0
    OP_NIL = 1
    OP_TRUE = 2
    OP_FALSE = 3
    OP_POP = 4
    OP_GET_LOCAL = 5
    OP_SET_LOCAL = 6
    OP_GET_GLOBAL = 7
    OP_DEFINE_GLOBAL = 8
    OP_SET_GLOBAL = 9
    OP_GET_UPVALUE = 10
    OP_SET_UPVALUE = 11
    OP_GET_PROPERTY = 12
    OP_SET_PROPERTY = 13
    OP_EQUAL = 14
    OP_GREATER = 15
    OP_LESS = 16
    OP_ADD = 17
    OP_SUBTRACT = 18
    OP_MULTIPLY = 19
    OP_DIVIDE = 20
    OP_NOT = 21
    OP_NEGATE = 22
    OP_PRINT = 23
    OP_JUMP = 24
    OP_JUMP_IF_FALSE = 25
    OP_LOOP = 26
    OP_CALL = 27
    OP_CLOSURE = 28
    OP_CLOSE_UPVALUE = 29
    OP_RETURN = 30
    OP_CLASS = 31
    OP_PLACEHOLDER = 255


@dataclass
class VMData(betterproto.Message):
    contexts: List["Context"] = betterproto.message_field(1)
    strings_at_addresses: Dict[str, "VMDataAddressAndHash"] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass
class VMDataAddressAndHash(betterproto.Message):
    address: int = betterproto.int64_field(1)
    hash: int = betterproto.int32_field(2)


@dataclass
class Upvalue(betterproto.Message):
    is_local: int = betterproto.int32_field(1)
    index: int = betterproto.int32_field(2)


@dataclass
class Context(betterproto.Message):
    context_name: str = betterproto.string_field(1)
    instruction_vals: Dict[int, "InstructionType"] = betterproto.map_field(
        2, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    function_address: int = betterproto.int64_field(3)
    first_instruction_address: int = betterproto.int64_field(4)
    constant_vals: Dict[int, "ValueType"] = betterproto.map_field(
        5, betterproto.TYPE_INT64, betterproto.TYPE_MESSAGE
    )
    arity: int = betterproto.int32_field(6)
    upvalue_count: int = betterproto.int32_field(7)
    upvalues: List["Upvalue"] = betterproto.message_field(8)


@dataclass
class InstructionType(betterproto.Message):
    opcode: "ContextOpcode" = betterproto.enum_field(1, group="InstructionTypes")
    address_or_constant: int = betterproto.int64_field(2, group="InstructionTypes")


@dataclass
class ValueType(betterproto.Message):
    function_address: int = betterproto.int64_field(1, group="ValueTypes")
    string_address: int = betterproto.int64_field(2, group="ValueTypes")
    num_val: float = betterproto.double_field(3, group="ValueTypes")
    bool_val: bool = betterproto.bool_field(4, group="ValueTypes")
