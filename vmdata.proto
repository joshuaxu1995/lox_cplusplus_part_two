syntax = "proto3";

package serializationPackage;

message VMData {
  repeated Context contexts = 1;
  map<string, AddressAndHash> stringsAtAddresses = 2;

  message AddressAndHash{
    int64 address = 1;
    int32 hash = 2;
  }
}

message Upvalue{
  int32 isLocal = 1;
  int32 index = 2;
}

message Context {

  string contextName = 1;
  map<int64, InstructionType> instructionVals = 2;
  int64 functionAddress = 3;
  int64 firstInstructionAddress = 4;
  map<int64, ValueType> constantVals = 5;
  int32 arity = 6;
  int32 upvalueCount = 7;
  repeated Upvalue upvalues = 8;

  enum Opcode
  {
    OP_CONSTANT = 0;
    OP_NIL = 1;
    OP_TRUE = 2;
    OP_FALSE = 3;
    OP_POP = 4;
    OP_GET_LOCAL = 5;
    OP_SET_LOCAL = 6;
    OP_GET_GLOBAL = 7;
    OP_DEFINE_GLOBAL = 8;
    OP_SET_GLOBAL = 9;
    OP_GET_UPVALUE = 10;
    OP_SET_UPVALUE = 11;
    OP_GET_PROPERTY = 12;
    OP_SET_PROPERTY = 13;
    OP_EQUAL = 14;
    OP_GREATER = 15;
    OP_LESS = 16;
    OP_ADD = 17;
    OP_SUBTRACT = 18;
    OP_MULTIPLY = 19;
    OP_DIVIDE = 20;
    OP_NOT = 21;
    OP_NEGATE = 22;
    OP_PRINT = 23;
    OP_JUMP = 24;
    OP_JUMP_IF_FALSE = 25;
    OP_LOOP = 26;
    OP_CALL = 27;
    OP_INVOKE = 28;
    OP_CLOSURE = 29;
    OP_CLOSE_UPVALUE = 30;
    OP_RETURN = 31;
    OP_CLASS = 32;
    OP_INHERIT = 33;
    OP_GET_SUPER = 34;
    OP_SUPER_INVOKE = 35;
    OP_METHOD = 36;
    OP_PLACEHOLDER = 255;
  } 
}

message InstructionType{
  oneof InstructionTypes{
    Context.Opcode opcode = 1;
    int64 addressOrConstant = 2;
  }
}

message ValueType {
  oneof ValueTypes{
    int64 functionAddress = 1;
    int64 stringAddress = 2;
    double numVal = 3;
    bool boolVal = 4;
  }
}



